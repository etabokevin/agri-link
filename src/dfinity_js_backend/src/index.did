service: () -> {
  registerUser : (record {name:text; role:variant {Consumer:null; Seller:null}; email:text}) -> (variant {Ok:record {id:text; owner:principal; name:text; joinedAt:nat64; role:variant {Consumer:null; Seller:null}; email:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  addProduct : (record {name:text; description:text; stock:nat64; category:variant {Poultry:null; Grains:null; Vegetables:null; Other:null; Fruits:null}; price:nat64}) -> (variant {Ok:record {id:text; status:text; buyerAddress:opt text; reviews:vec text; disputeStatus:bool; name:text; description:text; escrowBalance:nat64; stock:nat64; category:variant {Poultry:null; Grains:null; Vegetables:null; Other:null; Fruits:null}; sellerId:text; rating:nat64; price:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  addReview : (record {productId:text; comment:text; rating:nat64}) -> (variant {Ok:record {userId:text; createdAt:nat64; productId:text; comment:text; rating:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  viewProducts : () -> (variant {Ok:vec record {id:text; status:text; buyerAddress:opt text; reviews:vec text; disputeStatus:bool; name:text; description:text; escrowBalance:nat64; stock:nat64; category:variant {Poultry:null; Grains:null; Vegetables:null; Other:null; Fruits:null}; sellerId:text; rating:nat64; price:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
  viewProductReviews : (text) -> (variant {Ok:vec record {userId:text; createdAt:nat64; productId:text; comment:text; rating:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
  checkout : (vec record {productId:text; quantity:nat64; price:nat64}) -> (variant {Ok:record {id:text; status:text; createdAt:nat64; totalAmount:nat64; buyerId:text; products:vec record {productId:text; quantity:nat64; price:nat64}}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  viewOrders : () -> (variant {Ok:vec record {id:text; status:text; createdAt:nat64; totalAmount:nat64; buyerId:text; products:vec record {productId:text; quantity:nat64; price:nat64}}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
  searchProductsByCategory : (variant {Poultry:null; Grains:null; Vegetables:null; Other:null; Fruits:null}) -> (variant {Ok:vec record {id:text; status:text; buyerAddress:opt text; reviews:vec text; disputeStatus:bool; name:text; description:text; escrowBalance:nat64; stock:nat64; category:variant {Poultry:null; Grains:null; Vegetables:null; Other:null; Fruits:null}; sellerId:text; rating:nat64; price:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
  getUserProfile : () -> (variant {Ok:record {id:text; owner:principal; name:text; joinedAt:nat64; role:variant {Consumer:null; Seller:null}; email:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
  updateUserProfile : (record {name:text; role:variant {Consumer:null; Seller:null}; email:text}) -> (variant {Ok:record {id:text; owner:principal; name:text; joinedAt:nat64; role:variant {Consumer:null; Seller:null}; email:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  getProductDetails : (text) -> (variant {Ok:record {id:text; status:text; buyerAddress:opt text; reviews:vec text; disputeStatus:bool; name:text; description:text; escrowBalance:nat64; stock:nat64; category:variant {Poultry:null; Grains:null; Vegetables:null; Other:null; Fruits:null}; sellerId:text; rating:nat64; price:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
  add_to_escrow : (text, nat64) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  release_payment : (text) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  withdraw_from_escrow : (text, nat64) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  dispute_product : (text) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  resolve_dispute : (text, bool) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  mark_product_sold : (text) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  product_bid : (text, text) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  accept_bid : (text) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  rate_product : (text, nat64) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  update_product_category : (text, variant {Poultry:null; Grains:null; Vegetables:null; Other:null; Fruits:null}) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  update_product_description : (text, text) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  update_product_price : (text, nat64) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
  update_product_status : (text, text) -> (variant {Ok:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
}